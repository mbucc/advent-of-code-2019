Day 1
------------------------------------------------------------------------------------------
Super-concise alternative with generateSequence.
https://github.com/ephemient/aoc2019/blob/kt/src/main/kotlin/io/github/ephemient/aoc2019/Day1.kt

	private fun fuel(weight: Int): Int = weight / 3 - 2
	private fun fuels(weight: Int): Int =
	    generateSequence(fuel(weight), ::fuel)
		.takeWhile { it > 0 }
		.sum()
	fun part1(): Int = lines.sumBy { fuel(it.toInt()) }
	fun part2(): Int = lines.sumBy { fuels(it.toInt()) }


Day 5
------------------------------------------------------------------------------------------
I'm trying to do this with using types as much as possible.  What I'm finding is this is a
very different way of programming.  It takes me a long time (still working on part 1 of
day 5 after ~3 hours) to figure out the types.  But, once the types are done, making the
program run is easier, mainly because when creating a type fails it is easy to figure out
why.

Also, the code is very different---there are lots and lots of small methods.  And so far
I have not felt a big need to write tests for them---the logic is so simple, I am com-
fortable with proof by inspection.  For example, since so far in the puzzle all OpCodes
have had three or less arguments.  I created a type ParameterCount and made it an enum with
four values: ZERO, ONE, TWO, THREE.  There is nothing to test.

All these types also makes method arguments clearer.  I'm a fan of short variable names
(like you use in math, "Let X equal ...") but only if the method is really short and there
are not a lot of values.  Having a verbose type name let's you have short variable names.
